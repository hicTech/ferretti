{
  "name": "purify-css",
  "version": "1.1.9",
  "description": "Removed unused css. Compatible with single-page apps.",
  "main": "./src/purifycss.js",
  "dependencies": {
    "clean-css": "^3.2.10",
    "glob": "^6.0.4",
    "rework": "^1.0.1",
    "uglifyjs": "^2.4.10",
    "yargs": "^3.10.0"
  },
  "devDependencies": {
    "chai": "^3.0.0",
    "eslint": "^0.24.1",
    "mocha": "^2.2.5"
  },
  "scripts": {
    "pretest": "eslint src && eslint bin/purifycss",
    "test": "node ./node_modules/mocha/bin/mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/purifycss/purifycss.git"
  },
  "keywords": [
    "optimize",
    "css",
    "remove",
    "unused"
  ],
  "files": [
    "bin",
    "src",
    "LICENSE",
    "package.json",
    "README.md"
  ],
  "author": {
    "name": "Kenny Tran, Matthew Rourke, Phoebe Li"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/purifycss/purifycss/issues"
  },
  "bin": {
    "purifycss": "./bin/purifycss"
  },
  "homepage": "https://github.com/purifycss/purifycss",
  "readme": "[![Join the chat at https://gitter.im/purifycss/purifycss](https://badges.gitter.im/purifycss/purifycss.svg)](https://gitter.im/purifycss/purifycss?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n### PurifyCSS\n\nA function that takes content (HTML/JS/PHP/etc) and CSS, and returns a file made up of only the selectors you use.\n\nPurifyCSS does not modify the original CSS files. You can write to a new file, like minification.\n\nIf your application is using a CSS framework, this is especially useful as many selectors are often unused.\n\n<br />\n***\n<br />\n### Potential reduction\n* [Bootstrap](https://github.com/twbs/bootstrap) file: ~140k\n* App using ~40% of selectors.\n* Minified: ~117k\n* Purified + Minified: **~35k**\n\n<br />\n***\n<br />\n\n### Used selector detection\nStatically analyzes your code to pick up which selectors are used. \n\nBut will it catch all of the cases?\n<br />\n<br />\n#### Let's start off simple.\n#### Detecting the use of: ```button-active```\n``` html\n  <!-- html -->\n  <!-- class directly on element -->\n  <div class=\"button-active\">click</div>\n```\n\n``` javascript\n  // javascript\n  // Anytime your class name is together in your files, it will find it.\n  $(button).addClass('button-active');\n```\n\n<br />\n\n#### Now let's get crazy.\n#### Detecting the use of: ```button-active```\n``` javascript\n  // Can detect if class is split.\n  var half = 'button-';\n  $(button).addClass(half + 'active');\n\n  // Can detect if class is joined.\n  var dynamicClass = ['button', 'active'].join('-');\n  $(button).addClass(dynamicClass);\n  \n  // Can detect various more ways, including all Javascript frameworks.\n  // A React example.\n  var classes = classNames({\n    'button-active': this.state.buttonActive\n  });\n  \n  return (\n    <button className={classes}>Submit</button>;\n  );\n```\n\n<br />\n***\n<br />\n\n### Usage at Build Time\n\n[Grunt](https://github.com/purifycss/grunt-purify-css)\n\n[Gulp](https://github.com/purifycss/gulp-purifycss)\n\n[webpack](https://github.com/purifycss/purifycss-webpack-plugin)\n\n<br />\n***\n<br />\n### Standalone Usage\n\n#### Install\n```bash\nnpm install --save purify-css\n```\n\n#### Require\n```js\nvar purify = require('purify-css');\n```\n\n<br />\n***\n<br />\n\n### Examples\n\n<br />\n\n##### Example with source strings\n\n```js\nvar content = '<button class=\"button-active\"> Login </button>';\nvar css = '.button-active { color: green; }   .unused-class { display: block; }';\n\nconsole.log(purify(content, css));\n```\nlogs out:\n\n```\n.button-active { color: green; }\n```\n\n<br />\n\n##### Example with [glob](https://github.com/isaacs/node-glob) file patterns + writing to a file\n\n```js\nvar content = ['**/src/js/*.js', '**/src/html/*.html'];\nvar css = ['**/src/css/*.css'];\n\nvar options = {\n  // Will write purified CSS to this file.\n  output: './dist/purified.css'\n};\n\npurify(content, css, options);\n```\n\n<br />\n\n##### Example with both [glob](https://github.com/isaacs/node-glob) file patterns and source strings + minify + logging rejected selectors\n\n```js\nvar content = ['**/src/js/*.js', '**/src/html/*.html'];\nvar css = '.button-active { color: green; } .unused-class { display: block; }';\n\nvar options = {\n  output: './dist/purified.css',\n  \n  // Will minify CSS code in addition to purify.\n  minify: true,\n  \n  // Logs out removed selectors.\n  rejected: true\n};\n\npurify(content, css, options);\n```\nlogs out:\n\n```\n.unused-class\n```\n\n<br />\n\n##### Example with callback\n\n```js\nvar content = ['**/src/js/*.js', '**/src/html/*.html'];\nvar css = ['**/src/css/*.css'];\n\npurify(content, css, function (purifiedResult) {\n  console.log(purifiedResult);\n});\n```\n\n<br />\n\n##### Example with callback + options\n\n```js\nvar content = ['**/src/js/*.js', '**/src/html/*.html'];\nvar css = ['**/src/css/*.css'];\n\nvar options = {\n  minify: true\n};\n\npurify(content, css, options, function (purifiedAndMinifiedResult) {\n  console.log(purifiedAndMinifiedResult);\n});\n```\n\n<br />\n***\n<br />\n\n### API in depth\n\n```javascript\n// Four possible arguments.\npurify(content, css, options, callback);\n```\n\n<br />\n\n\n#####  The ```content``` argument\n##### Type: ```Array``` or ```String```\n\n**```Array```** of [glob](https://github.com/isaacs/node-glob) file patterns to the files to search through for used classes (HTML, JS, PHP, ERB, Templates, anything that uses CSS selectors).\n\n**```String```** of content to look at for used classes.\n\n<br />\n\n##### The ```css``` argument\n##### Type: ```Array``` or ```String```\n\n**```Array```** of [glob](https://github.com/isaacs/node-glob) file patterns to the CSS files you want to filter.\n\n**```String```** of CSS to purify.\n\n<br />\n\n##### The (optional) ```options``` argument\n##### Type: ```Object```\n\n##### Properties of options object:\n\n* **```minify:```** Set to ```true``` to minify. Default: ```false```.\n\n* **```output:```** Filepath to write purified CSS to. Returns raw string if ```false```. Default: ```false```.\n\n* **```info:```** Logs info on how much CSS was removed if ```true```. Default: ```false```.\n\n* **```rejected:```** Logs the CSS rules that were removed if ```true```. Default: ```false```.\n\n* **```whitelist```** Array of selectors to always leave in. Ex. `['button-active', '*modal*']` this will leave any selector that includes `modal` in it and selectors that match `button-active`. (wrapping the string with *'s, leaves all selectors that include it)\n\n\n<br />\n\n##### The (optional) ```callback``` argument\n##### Type: ```Function```\n\nA function that will receive the purified CSS as it's argument.\n\n##### Example of callback use\n``` javascript\npurify(content, css, options, function(purifiedCSS){\n  console.log(purifiedCSS, ' is the result of purify');\n});\n```\n\n##### Example of callback without options\n``` javascript\npurify(content, css, function(purifiedCSS){\n  console.log('callback without options and received', purifiedCSS);\n});\n```\n\n<br />\n***\n<br />\n\n### CLI Usage\n\n```\n$ npm install -g purify-css\n```\n\n```\n$ purifycss\nusage: purifycss <css> <content> [option ...]\n\noptions:\n --min                Minify CSS\n --out [filepath]     Filepath to write purified CSS to\n --info               Logs info on how much CSS was removed\n --rejected           Logs the CSS rules that were removed\n\n -h, --help           Prints help (this message) and exits\n```\n<br />\n##### Example CLI Usage\n\n```\n$ purifycss src/js/main.js src/css/main.css src/css/bootstrap.css --min --info --out src/dist/index.css\n```\nThis will concat both `main.css` and `bootstrap.css` and purify it by looking at what CSS selectors were used inside of `main.js`. It will then write the result to `dist/index.css`\n\nThe `--min` flag minfies the result.\n\nThe `--info` flag will print this to stdout:\n```\n##################################\nPurifyCSS has reduced the file size by ~35.2%\n##################################\n```\nThe CLI currently does not support file patterns.\n",
  "readmeFilename": "README.md",
  "_id": "purify-css@1.1.9",
  "_shasum": "46c9acd8940f3076c0c346c027e286f996168357",
  "_from": "purify-css@^1.0.x",
  "_resolved": "https://registry.npmjs.org/purify-css/-/purify-css-1.1.9.tgz"
}
